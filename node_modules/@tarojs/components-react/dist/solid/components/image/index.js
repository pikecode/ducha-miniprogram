import { template, use, spread, mergeProps, getOwner, effect, style, insert, addEventListener, setAttribute } from 'solid-js/web';
import { __rest } from 'tslib';
import './style/index.scss.js';
import classNames from 'classnames';
import { createForwardRefComponent } from '../../utils/index.js';
import { useRef, useState, useEffect, useCallback } from '../../utils/hooks.solid.js';

var _tmpl$ = /*#__PURE__*/template(`<div><canvas-tag>`, true, false, false),
  _tmpl$2 = /*#__PURE__*/template(`<div>`),
  _tmpl$3 = /*#__PURE__*/template(`<img>`);
// CDN脚本URL
const LEGO_CDN_URL = 'http://ossin.jd.com/swm-plus/h5Tag/tag.js';
// 检查CDN脚本是否已加载
const isLegoScriptLoaded = () => {
  return document.querySelector(`script[src="${LEGO_CDN_URL}"]`) !== null;
};
// 插入CDN脚本
const insertLegoScript = () => {
  if (isLegoScriptLoaded()) return;
  const script = document.createElement('script');
  script.type = 'module';
  script.src = LEGO_CDN_URL;
  document.head.appendChild(script);
};
// 解析lego协议URL
const parseLegoUrl = src => {
  if (!src.startsWith('lego://')) return null;
  try {
    // 移除 'lego://' 前缀
    const urlWithoutProtocol = src.substring(7);
    // 分割tagId和参数
    const [tagId, params] = urlWithoutProtocol.split('?');
    // 解析参数
    const text = params ? new URLSearchParams(params).get('text') || '' : '';
    return {
      tagId,
      text
    };
  } catch (error) {
    console.warn('Failed to parse lego URL:', src, error);
    return null;
  }
};
function Image(props) {
  const imgRef = useRef(null);
  const observer = useRef({});
  const [, setIsLoaded] = useState(false);
  const {
      className,
      style: style$1 = {},
      src,
      mode,
      onError,
      lazyLoad,
      imgProps,
      forwardedRef,
      lang
    } = props,
    reset = __rest(props
    // 检查是否为lego模式
    , ["className", "style", "src", "mode", "onError", "lazyLoad", "imgProps", "forwardedRef", "lang"]);
  // 检查是否为lego模式
  const legoData = parseLegoUrl(src);
  const isLegoMode = legoData !== null;
  // 如果是lego模式，确保CDN脚本已加载
  useEffect(() => {
    if (isLegoMode) {
      insertLegoScript();
    }
  }, [isLegoMode]);
  const cls = classNames('taro-img', {
    'taro-img__widthfix': mode === 'widthFix'
  }, className);
  const imgCls = classNames('taro-img__mode-' + (mode || 'scaleToFill').toLowerCase().replace(/\s/g, ''));
  const imageOnLoad = useCallback(e => {
    const {
      onLoad
    } = props;
    Object.defineProperty(e, 'detail', {
      enumerable: true,
      writable: true,
      value: {
        width: e.target.width,
        height: e.target.height
      }
    });
    onLoad && onLoad(e);
  }, [props]);
  useEffect(() => {
    var _a, _b;
    if (lazyLoad) {
      observer.current = new IntersectionObserver(entries => {
        // 异步 api 关系
        if (entries[entries.length - 1].isIntersecting) {
          setIsLoaded(true);
          // findDOMNode(this).children[0].src = src
          imgRef.current.src = src;
        }
      }, {
        rootMargin: '300px 0px'
      });
      (_b = (_a = observer.current).observe) === null || _b === void 0 ? void 0 : _b.call(_a, imgRef.current);
    }
    return () => {
      var _a, _b;
      (_b = (_a = observer.current) === null || _a === void 0 ? void 0 : _a.disconnect) === null || _b === void 0 ? void 0 : _b.call(_a);
    };
  }, [lazyLoad, src]);
  // 如果是lego模式，渲染canvas-tag
  if (isLegoMode && legoData) {
    return (() => {
      var _el$ = _tmpl$(),
        _el$2 = _el$.firstChild;
      use(forwardedRef, _el$);
      _el$.className = cls;
      spread(_el$, reset, false, true);
      _el$2.lang = lang;
      spread(_el$2, mergeProps({
        get tagId() {
          return legoData.tagId;
        },
        get text() {
          return legoData.text;
        }
      }, imgProps), false, false);
      _el$2._$owner = getOwner();
      effect(_$p => style(_el$, style$1, _$p));
      return _el$;
    })();
  }
  // 普通图片模式
  return (() => {
    var _el$3 = _tmpl$2();
    use(forwardedRef, _el$3);
    _el$3.className = cls;
    spread(_el$3, reset, false, true);
    insert(_el$3, lazyLoad ? (() => {
      var _el$4 = _tmpl$3();
      addEventListener(_el$4, "error", onError);
      addEventListener(_el$4, "load", imageOnLoad);
      use(img => imgRef.current = img, _el$4);
      _el$4.className = imgCls;
      setAttribute(_el$4, "data-src", src);
      spread(_el$4, imgProps, false, false);
      return _el$4;
    })() : (() => {
      var _el$5 = _tmpl$3();
      addEventListener(_el$5, "error", onError);
      addEventListener(_el$5, "load", imageOnLoad);
      use(img => imgRef.current = img, _el$5);
      _el$5.className = imgCls;
      setAttribute(_el$5, "src", src);
      spread(_el$5, imgProps, false, false);
      return _el$5;
    })());
    effect(_$p => style(_el$3, style$1, _$p));
    return _el$3;
  })();
}
var index = createForwardRefComponent(Image);

export { index as default };
//# sourceMappingURL=index.js.map
